@model F1WebSite.ViewModels.DriversViewModel
@{
    ViewData["Title"] = "F1 Teams";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/css/styleF1.css">
    <link rel="stylesheet" href="~/css/shared.css">

</head>
<body>
    <div class="F1-title">
        <h1>F1 2024</h1>
        <p>
            Discover everything you need to know about this year's Formula 1 teams - drivers, podium finishes, points earned and championship titles.
        </p>
        <button id="addTeamButton" class="addButton" onclick="togglePopup()">Add a new team</button> @* opens a pop-up with a form that asks the team info *@

        <div id="myPopup" class="popup">
            <div class="popup-content">
                <h2>Add a New Team</h2>
                <div class="form">
                    <label for="teamName">Team Name:</label>
                    <input type="text" id="nameOfTeam" name="name" required />
                </div>
                <div class="popButton-container">
                    <button type="button" class="popButton" onclick="submitTeam()">Submit</button>
                    <button type="button" class="popButton" onclick="closePopup()">Cancel</button>
                </div>
            </div>
        </div>

        <div class="overlay" onclick="closePopup()"></div>

    </div>

    <div class="team-container">
        @{
            var sortedTeams = Model.Drivers
            .GroupBy(d => d.teamId) // Groups the drivers by their teamId
            .Select(teamGroup => new // Creates a new object with team, drivers, and total points
            {
                Team = Model.Teams.FirstOrDefault(t => t.teamId == teamGroup.Key),
                Drivers = teamGroup,
                TotalPoints = Model.DriverTeams.Where(dt => dt.teamId == teamGroup.Key).Sum(dt => dt.points)
            })
            .OrderByDescending(t => t.TotalPoints) // Sorts teams by total points in descending order
            .ToList(); // Materializes the result into a list
        }


        @foreach (var teamData in sortedTeams)
        {
            var currentTeam = teamData.Team;
            var teamGroup = teamData.Drivers;
            int totPoints = teamData.TotalPoints;

            try
            {
                var teamColor = currentTeam.teamColor;
                <div class="team-card-container">
                    <a href="@Url.Action("DriverTeam", "Home", new { teamId = teamGroup.First().teamId })" class="team-card" style="--team-border-color: @teamColor;">
                        <div class="team-header" style="--team-back-color: @teamColor;">
                            <h1>@currentTeam.TeamName</h1>
                            <h1>@totPoints pt</h1>
                        </div>

                        <div class="team-drivers">

                            @{ bool isFirst = true;}

                            @foreach (var driver in teamGroup.Take(2))
                            {
                                if (driver.name != null)
                                {
                                    <div class="driver">
                                        <p>@driver.name @driver.surname</p>
                                    </div>
                                    @if (isFirst)
                                    {
                                        string teamNameForLogo = TeamCleaner(currentTeam.TeamName);
                                        string imageUrl = $"https://media.formula1.com/content/dam/fom-website/teams/2024/{teamNameForLogo}-logo.png";

                                        <img src="@imageUrl"
                                             alt="@currentTeam.TeamName Logo"
                                             class="team-logo"
                                             onerror="this.style.display='none';" />

                                        isFirst = false;
                                    }
                                }
                            }
                        </div>

                        <div class="team-image">
                            @{
                                string teamNameForIMG = TeamCleaner(currentTeam.TeamName);
                            }
                            <img src="https://media.formula1.com/d_team_car_fallback_image.png/content/dam/fom-website/teams/2024/@teamNameForIMG"
                                 alt="@teamGroup.Key Car" />
                        </div>
                    </a>

                    @if (currentTeam.isDeletable)
                    {
                        <input type="button" value="-" class="removeButton"
                               onclick="location.href='@Url.Action("RemoveTeam", "Home", new { teamName = currentTeam.TeamName })'" />
                    }
                </div>
            }
            catch (Exception e)
            {
                throw new ApplicationException("current team set to NULL", e);
            }
        }
    </div>

   
    @functions {
        public string TeamCleaner(string team)
        {
            

            int spaceIndex = team.IndexOf(' ');

            if (spaceIndex != -1) 
            {
                string afterSpace = team.Substring(spaceIndex + 1);

                if (afterSpace.StartsWith("Ra"))
                {
                    return  team.Substring(0, spaceIndex);
                }
                else
                {
                   return team = team.Replace(" ", "-");
                }
            }
            return team;
        }
        }
    <script>
        const addTeamUrl = '@Url.Action("AddTeam", "Home")';//URL.Action is a razor helper therefor it can only be used here and not in the site.js
    </script>

    
</body>
</html>
